{"version":3,"sources":["State/Actions/Base/ActionTypes.ts","Components/Header/Header.tsx","Components/Login/Login.tsx","State/Requests/Factory/RequestFactory.ts","Components/Main/Main.tsx","Components/Sidebar/Sidebar.tsx","Components/Footer/Footer.tsx","Components/Body/Body.tsx","App/App.js","serviceWorker.js","State/ShopyState.ts","State/Requests/Base/RequestTypes.ts","State/Reducers/ShopyReducer.ts","Models/Auth/LoginRequest.ts","Models/Http/HttpMethod.ts","Models/Auth/LoginResponse.ts","Client/ShopyClient.ts","Service/Auth/AuthService.ts","Client/Urls.ts","State/Saga/ShopySaga.ts","State/Actions/Factory/ActionFactory.ts","State/ShopyStore.ts","index.js"],"names":["ActionTypes","Header","className","href","initialFormData","Username","Password","Login","props","onChangeUsername","event","preventDefault","setState","state","target","value","onChangePassword","onSubmit","LoginUser","this","id","type","name","onChange","placeholder","React","Component","connect","dispatch","username","password","Payload","Main","role","exact","path","Sidebar","to","Footer","today","Date","date","getFullYear","getMonth","getDate","Body","App","Boolean","window","location","hostname","match","RequestTypes","initialState","IsUserLogged","ShopyReducer","action","USER_LOGED_IN","IsSuccess","LoginRequest","HttpMethod","LoginResponse","isSuccess","Post","body","a","ShopyClient","Create","baseAddress","BaseAddress","createClient","axios","create","baseURL","headers","request","Get","method","data","url","response","console","log","AuthService","loginRequest","WatchLoginUser","Watch","takeLatest","LOGIN_USER","authService","payload","call","loginResponse","put","all","sagaMiddleware","createSagaMiddleware","run","ShopySaga","store","createStore","applyMiddleware","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.da0398f4.chunk.js","sourcesContent":["export enum ActionTypes {\r\n    USER_LOGED_IN = \"USER_LOGED_IN\"\r\n}","import React from 'react';\r\n\r\nconst Header: React.FC = () => (\r\n    <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n        <a className=\"navbar-brand col-sm-3 col-md-2 mr-0\" href=\"#\">Admim portal</a>\r\n    </nav>\r\n)\r\n\r\n\r\nexport default Header","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { ILoginFormState } from './Types/ILoginFormState'\r\nimport { ILoginFormDispatch } from './Types/ILoginFormDispatch'\r\nimport * as RequestFactory from '../../State/Requests/Factory/RequestFactory'\r\n\r\nconst initialFormData: ILoginFormState = {\r\n    Username: \"\",\r\n    Password: \"\"\r\n}\r\n\r\nclass Login extends React.Component<ILoginFormDispatch, ILoginFormState> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.setState(initialFormData);\r\n    }\r\n\r\n    onChangeUsername = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        event.preventDefault();\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            Username: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangePassword = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        event.preventDefault();\r\n\r\n        this.setState({\r\n            Password: event.target.value\r\n        });\r\n    }\r\n\r\n    onSubmit = () => {\r\n        this.props.LoginUser(this.state);\r\n        this.setState({});\r\n    }\r\n\r\n    render() {\r\n        return (<div>\r\n            <form className=\"form-signin\" onSubmit={this.onSubmit}>\r\n                <h1 className=\"h3 mb-3 font-weight-normal\">Please sign in: </h1>\r\n                <input\r\n                    className=\"form-control mb-2\"\r\n                    id=\"username\"\r\n                    type=\"text\"\r\n                    name=\"username\"\r\n                    onChange={this.onChangeUsername}\r\n                    placeholder=\"Enter username\" />\r\n                <input\r\n                    className=\"form-control mb-2\"\r\n                    id=\"password\"\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    onChange={this.onChangePassword}\r\n                    placeholder=\"Enter password\" />\r\n                <span className=\"float-left mr-2 w-100\">\r\n                    Remember me: <input type=\"checkbox\"></input>\r\n                </span>\r\n                <button className=\"btn btn-primary form-control w-75\" type=\"submit\">\r\n                    Login:\r\n                    </button>\r\n            </form>\r\n        </div >)\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any): ILoginFormDispatch => ({\r\n    LoginUser: (state: ILoginFormState) => dispatch(RequestFactory.LoginUserRequest(state.Username, state.Password))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(Login)","import { ILoginUserRequest, ILoginUserRequestPayload } from './../Login/ILoginUserRequest';\r\n\r\nexport const LoginUserRequest = (username: string, password: string): ILoginUserRequest => (<ILoginUserRequest>{\r\n    Payload: <ILoginUserRequestPayload>{\r\n        Username: username,\r\n        Password: password\r\n    }\r\n}) ","import React from 'react';\r\nimport { Switch, Route } from 'react-router'\r\nimport Login from '../Login/Login'\r\n\r\nconst Main: React.FC = () => (\r\n    <main id=\"content-wrap\" role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 px-4 \">\r\n        <Switch>\r\n            <Route exact path=\"/\">\r\n                <Login />\r\n            </Route>\r\n            <Route path=\"/products\">\r\n                <div>\r\n                    Products...\r\n            </div>\r\n            </Route>\r\n            <Route path=\"/categories\">\r\n                <div>\r\n                    Categories...\r\n            </div>\r\n            </Route>\r\n        </Switch>\r\n    </main>\r\n)\r\n\r\nexport default Main","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Sidebar: React.FC = () => (\r\n    <nav className=\"col-md-2 d-none d-md-block bg-light sidebar\">\r\n        <div className=\"sidebar-sticky\">\r\n            <ul className=\"nav flex-column\">\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/products\" className=\"nav-link\">\r\n                        Products\r\n                    </Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/categories\" className=\"nav-link\">\r\n                        Categories\r\n                    </Link>\r\n                </li>\r\n            </ul>\r\n        </div >\r\n    </nav >\r\n)\r\n\r\nexport default Sidebar","import React from 'react'\r\n\r\nconst Footer: React.FC = () => {\r\n\r\n    let today = new Date();\r\n    let date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\r\n\r\n    return (\r\n        <footer className=\"footer\">\r\n            <div className=\"container\">\r\n                <span>Admin portal {date}</span>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer","import React from 'react'\r\nimport Main from '../Main/Main'\r\nimport Sidebar from '../Sidebar/Sidebar'\r\nimport Footer from '../Footer/Footer'\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\n\r\nconst Body: React.FC = () => (\r\n    <div className=\"container-fluid main-container\">\r\n        <div className=\"row\">\r\n            <Router>\r\n                <Sidebar />\r\n                <Main />\r\n            </Router>\r\n        </div>\r\n        <Footer />\r\n    </div>\r\n)\r\n\r\nexport default Body","import React from 'react';\nimport './App.css';\nimport Header from '../Components/Header/Header'\nimport Body from '../Components/Body/Body'\n\nconst App = () => (\n  <div>\n    <Header />\n    <Body />\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export interface IShopyState {\r\n    IsUserLogged: boolean;\r\n}\r\n\r\nexport const GetInitailState = () => <IShopyState>{\r\n    IsUserLogged: false\r\n}","export enum RequestTypes {\r\n    LOGIN_USER = \"LOGIN_USER\"\r\n}","import { ActionTypes } from '../Actions/Base/ActionTypes';\r\nimport { IActions } from '../Actions/Base/Actions';\r\nimport { IShopyState, GetInitailState } from '../ShopyState';\r\n\r\nconst initialState = GetInitailState();\r\n\r\nexport const ShopyReducer = (state: IShopyState = initialState, action: IActions): IShopyState => {\r\n    switch (action.type) {\r\n        case ActionTypes.USER_LOGED_IN: {\r\n            return <IShopyState>{\r\n                ...state,\r\n                IsUserLogged: action.Payload.IsSuccess\r\n            }\r\n        }\r\n    }\r\n}\r\n","export class LoginRequest {\r\n    Username: string;\r\n    Password: string;\r\n\r\n    constructor(username: string, password: string) {\r\n        this.Username = username;\r\n        this.Password = password;\r\n    }\r\n}","export enum HttpMethod {\r\n    Get = \"get\",\r\n    Post = \"post\",\r\n    Put = \"put\",\r\n    Delete = \"delete\"\r\n}","export class LoginResponse {\r\n\r\n    IsSuccess: boolean;\r\n\r\n    constructor(isSuccess: boolean) {\r\n        this.IsSuccess = isSuccess;\r\n    }\r\n\r\n}","import IShopyClient from './IShopyClient'\r\nimport IApiResponse from './IApiResponse'\r\nimport axios from 'axios'\r\nimport { HttpMethod } from '../Models/Http/HttpMethod';\r\n\r\nexport async function Get<TResult>(path: string): Promise<IApiResponse<TResult>> {\r\n    return await ShopyClient.Create().Get(path);\r\n}\r\n\r\nexport async function Post<TResult, TRequest>(path: string, body: TRequest): Promise<IApiResponse<TResult>> {\r\n    return await ShopyClient.Create().Post(path, body);\r\n}\r\n\r\nexport async function Put<TResult, TRequest>(path: string, body: TRequest): Promise<IApiResponse<TResult>> {\r\n    return await ShopyClient.Create().Put(path, body);\r\n}\r\n\r\nexport async function Delete<TResult>(path: string): Promise<IApiResponse<TResult>> {\r\n    return await ShopyClient.Create().Delete(path);\r\n}\r\n\r\nclass ShopyClient implements IShopyClient {\r\n\r\n    BaseAddress: string;\r\n\r\n    private constructor(baseAddress: string) {\r\n        this.BaseAddress = baseAddress;\r\n    }\r\n\r\n    public static Create(): IShopyClient {\r\n        return new ShopyClient(\"http://localhost:50181/\");\r\n    }\r\n\r\n    async Get<TResult>(path: string): Promise<IApiResponse<TResult>> {\r\n        return await this.request<TResult>(HttpMethod.Get, path);\r\n    }\r\n\r\n    async Post<TResult, TRequest>(path: string, body: TRequest): Promise<IApiResponse<TResult>> {\r\n        return await this.request<TResult>(HttpMethod.Get, path, body);\r\n    }\r\n\r\n    async Put<TResult, TRequest>(path: string, body: TRequest): Promise<IApiResponse<TResult>> {\r\n        return await this.request<TResult>(HttpMethod.Get, path, body);\r\n    }\r\n\r\n    async Delete<TResult>(path: string): Promise<IApiResponse<TResult>> {\r\n        return await this.request<TResult>(HttpMethod.Get, path);\r\n    }\r\n\r\n    async request<TResult, TRequest = {}>(\r\n        method: HttpMethod,\r\n        path: string,\r\n        data: TRequest = <any>{}): Promise<IApiResponse<TResult>> {\r\n        try {\r\n            const response = await this.createClient()\r\n                .request({\r\n                    data: data,\r\n                    url: path,\r\n                    method: method\r\n                });\r\n\r\n            return <IApiResponse<TResult>>{\r\n                Body: <TResult>response.data\r\n            };\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    createClient = () => axios.create({\r\n        baseURL: this.BaseAddress,\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n\r\n}","import { LoginUrl } from '../../Client/Urls';\r\nimport { LoginResponse } from './../../Models/Auth/LoginResponse';\r\nimport { LoginRequest } from './../../Models/Auth/LoginRequest';\r\nimport { IAuthService } from './IAuthService';\r\nimport { Post } from '../../Client/ShopyClient';\r\n\r\nexport class AuthService implements IAuthService {\r\n\r\n    async Login(loginRequest: LoginRequest): Promise<LoginResponse> {\r\n\r\n        var response = await Post<boolean, LoginRequest>(LoginUrl, loginRequest)\r\n\r\n        var isSuccess = response.Body;\r\n\r\n        return new LoginResponse(isSuccess);\r\n    }\r\n}","export const LoginUrl = \"/identity/login\"","import { LoginRequest } from './../../Models/Auth/LoginRequest';\r\nimport { RequestTypes } from '../Requests/Base/RequestTypes';\r\nimport { ILoginUserRequest } from './../Requests/Login/ILoginUserRequest';\r\nimport { all, put, takeLatest, call } from 'redux-saga/effects'\r\nimport { AuthService } from '../../Service/Auth/AuthService';\r\nimport * as ActionFactory from '../Actions/Factory/ActionFactory';\r\nimport { LoginResponse } from '../../Models/Auth/LoginResponse';\r\n\r\n// login user\r\nfunction* WatchLoginUser() {\r\n    yield takeLatest(RequestTypes.LOGIN_USER, LoginUser)\r\n}\r\n\r\nfunction* LoginUser(request: ILoginUserRequest) {\r\n\r\n    var authService = new AuthService();\r\n    var payload = request.Payload;\r\n    var loginRequest = new LoginRequest(payload.Username, payload.Password);\r\n    var loginResponse = yield call(() => authService.Login(loginRequest));\r\n\r\n    yield put(ActionFactory.UserLogin(loginResponse.IsSuccess));\r\n}\r\n\r\nexport function* Watch() {\r\n    yield all([\r\n        WatchLoginUser()\r\n    ])\r\n}","import { IUserLogedAction } from './../Login/IUserLogedAction';\r\nimport { ActionTypes } from '../Base/ActionTypes';\r\n\r\nexport const UserLogin = (isSuccess: boolean): IUserLogedAction => {\r\n    return <IUserLogedAction>{\r\n        type: ActionTypes.USER_LOGED_IN\r\n    }\r\n}","import { ShopyReducer } from './Reducers/ShopyReducer'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport * as ShopySaga from './Saga/ShopySaga'\r\n\r\n// //create saga\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\n// run saga\r\nsagaMiddleware.run(ShopySaga.Watch)\r\n\r\n// create store and bind saga\r\nexport const CreateShopyStore = () => createStore(ShopyReducer, applyMiddleware(sagaMiddleware))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App/App'\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { CreateShopyStore } from './State/ShopyStore';\n\nconst store = CreateShopyStore();\n\nconst app = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}